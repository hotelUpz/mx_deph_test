import asyncio
from pprint import pformat
import copy
from typing import *
from a_config import *
from b_context import BotContext
from c_log import ErrorHandler, log_time
from c_utils import validate_init_sl, validate_tp_cap_dep_levels
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)


# ===== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è =====
def validate_user_config(user_cfg: dict) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –û–±–Ω–æ–≤–ª—è–µ—Ç tp_levels –≤—Ç–æ—Ä—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º tp_order_volume.
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ SL –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ None.
    """

    config = user_cfg.setdefault("config", {})
    fin = config.setdefault("fin_settings", {})

    # === MEXC ===
    mexc = config.get("MEXC", {})
    if mexc.get("proxy_url") == 0:
        return False
    if not mexc.get("api_key") or not mexc.get("api_secret") or not mexc.get("u_id"):
        return False

    # === FIN SETTINGS ===
    if fin.get("margin_size") is None:
        return False
    if fin.get("margin_mode") is None:
        return False
    if fin.get("leverage") is None:
        return False

    # –§–æ—Ä–º–∏—Ä—É–µ–º SL: None –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ
    sl_val = fin.get("sl")
    if sl_val is not None:
        try:
            sl_val = float(sl_val)
            fin["sl"] = sl_val if sl_val < 0 else -abs(sl_val)
        except:
            fin["sl"] = None
        if not validate_init_sl(fin.get("sl")):
            return False
    else:
        fin["sl"] = None

    if fin.get("sl_type") is None:
        return False
    if not fin.get("tp_order_volume") or fin.get("tp_order_volume") > 100:
        return False

    tp_cap_dep = fin.get("tp_levels", {})
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ –∏—Ö –¥–ª–∏–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã
    if any(rk not in tp_cap_dep for rk in RANGE_KEYS):
        return False
    # lengths = [len(tp_cap_dep[rk]) for rk in RANGE_KEYS]
    # if lengths and len(set(lengths)) > 1:
    #     return False
    # if lengths and any(l == 0 for l in lengths):
    #     return False

    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ä—Ç–µ–∂–∞ tp_levels
    tp_volume = fin.get("tp_order_volume")
    if not tp_volume or tp_volume > 100:
        return False

    return True

def format_config(
    cfg: dict,
    indent: int = 0,
    target_key: str = None,
    alt_key: str = None,
    ex_key: str = None,
) -> str:
    lines = []
    pad = "  " * indent

    for k, v in cfg.items():
        # –∏—Å–∫–ª—é—á–∞–µ–º –∫–ª—é—á
        if k == ex_key:
            continue

        # –∑–∞–º–µ–Ω—è–µ–º –∏–º—è –∫–ª—é—á–∞
        display_key = alt_key if k == target_key else k

        if isinstance(v, dict):
            lines.append(f"{pad}‚Ä¢ {display_key}:")
            lines.append(format_config(v, indent + 1, target_key, alt_key, ex_key))
        else:
            lines.append(f"{pad}‚Ä¢ {display_key}: {v}")

    return "\n".join(lines)


class TelegramUserInterface:
    def __init__(self, bot: Bot, dp: Dispatcher,  context: BotContext, info_handler: ErrorHandler):
        self.bot = bot
        self.dp = dp  # aiogram v3
        self.context = context
        self.info_handler = info_handler
        self._polling_task: asyncio.Task | None = None
        self._stop_flag = False
        self.bot_iteration_lock = asyncio.Lock()

        # ===== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =====
        self.main_menu = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), types.KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å")],
                [types.KeyboardButton(text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç"), types.KeyboardButton(text="‚èπ –°—Ç–æ–ø")]
            ],
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚Ä¶"
        )

        # ===== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ =====
        self.dp.message.register(self.start_handler, Command("start"))
        self.dp.message.register(self.settings_cmd, self._text_contains(["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"]))
        self.dp.message.register(self.status_cmd, self._text_contains(["—Å—Ç–∞—Ç—É—Å"]))
        self.dp.message.register(self.start_cmd, self._text_contains(["—Å—Ç–∞—Ä—Ç"]))
        self.dp.message.register(self.stop_cmd, self._text_contains(["—Å—Ç–æ–ø"]))
        self.dp.message.register(self.text_message_handler, self._awaiting_input)

        # ===== Inline Callbacks =====
        self.dp.callback_query.register(self.settings_handler, F.data == "SETTINGS")
        self.dp.callback_query.register(self.mexc_settings_handler, F.data == "SET_MEXC")
        self.dp.callback_query.register(self.api_key_input, F.data == "SET_API_KEY")
        self.dp.callback_query.register(self.secret_key_input, F.data == "SET_SECRET_KEY")
        self.dp.callback_query.register(self.proxy_input, F.data == "SET_PROXY")
        self.dp.callback_query.register(self.uid_input, F.data == "SET_UID")
        self.dp.callback_query.register(self.fin_settings_handler, F.data == "SET_FIN")
        self.dp.callback_query.register(self.margin_size_input, F.data == "SET_MARGIN")
        self.dp.callback_query.register(self.margin_mode_input, F.data == "SET_MARGIN_MODE")
        self.dp.callback_query.register(self.leverage_input, F.data == "SET_LEVERAGE")
        self.dp.callback_query.register(self.sl_input, F.data == "SET_SL")
        self.dp.callback_query.register(self.sl_type_input, F.data == "SET_SL_TYPE")
        self.dp.callback_query.register(self.tp_levels_input, F.data == "SET_TP_LEVELS")
        self.dp.callback_query.register(self.tp_order_volume_input, F.data == "SET_TP_ORDER_VOLUME")
        for rk in RANGE_KEYS:
            self.dp.callback_query.register(self.tp_range_select, F.data == f"SET_TP_RANGE_{rk}")

        self.dp.callback_query.register(self.start_button, F.data == "START")
        self.dp.callback_query.register(self.stop_button, F.data == "STOP")

    # ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ =====
    def _text_contains(self, keys: list[str]):
        def _f(message: types.Message) -> bool:
            if not message.text:
                return False
            txt = message.text.strip().lower()
            return any(k in txt for k in keys)
        return _f

    def _awaiting_input(self, message: types.Message) -> bool:
        chat_id = message.chat.id
        cfg = self.context.users_configs.get(chat_id)
        return bool(cfg and cfg.get("_await_field"))

    # ===== Keyboards =====
    def _settings_keyboard(self) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîë MEXC", callback_data="SET_MEXC")],
            [InlineKeyboardButton(text="üí∞ FIN SETTINGS", callback_data="SET_FIN")]
        ])

    def _mexc_keyboard(self) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="API Key", callback_data="SET_API_KEY")],
            [InlineKeyboardButton(text="Secret Key", callback_data="SET_SECRET_KEY")],
            [InlineKeyboardButton(text="Proxy URL", callback_data="SET_PROXY")],
            [InlineKeyboardButton(text="User ID", callback_data="SET_UID")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="SETTINGS")]
        ])

    def _fin_keyboard(self) -> InlineKeyboardMarkup:
        kb = [
            [InlineKeyboardButton(text="Margin Size", callback_data="SET_MARGIN")],
            [InlineKeyboardButton(text="Margin Mode", callback_data="SET_MARGIN_MODE")],
            [InlineKeyboardButton(text="Leverage", callback_data="SET_LEVERAGE")],
            [InlineKeyboardButton(text="Stop Loss", callback_data="SET_SL")],
            [InlineKeyboardButton(text="SL Type", callback_data="SET_SL_TYPE")],
            [InlineKeyboardButton(text="TP Levels", callback_data="SET_TP_LEVELS")],
            [InlineKeyboardButton(text="TP Order Volume", callback_data="SET_TP_ORDER_VOLUME")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="SETTINGS")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=kb)    
    
    # ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ =====
    def ensure_user_config(self, user_id: int):
        """–°–æ–∑–¥–∞—ë—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —é–∑–µ—Ä–∞, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç –≤ –∫—ç—à–µ."""
        if user_id not in self.context.users_configs:
            self.context.users_configs[user_id] = copy.deepcopy(INIT_USER_CONFIG)
            self.context.queues_msg[user_id] = []

    # ===== START / STATUS / STOP =====
    async def start_handler(self, message: types.Message):
        chat_id = message.chat.id
        self.ensure_user_config(chat_id)  # üîπ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥ –µ—Å—Ç—å
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–Ω–∏–∑—É üëá", reply_markup=self.main_menu)

    async def settings_cmd(self, message: types.Message):
        chat_id = message.chat.id
        self.ensure_user_config(chat_id)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=self._settings_keyboard())

    async def status_cmd(self, message: types.Message):
        chat_id = message.chat.id
        self.ensure_user_config(chat_id)
        cfg = self.context.users_configs[chat_id]

        status = "–í —Ä–∞–±–æ—Ç–µ" if getattr(self.context, "start_bot_iteration", False) else "–ù–µ –∞–∫—Ç–∏–≤–µ–Ω"

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
        full_cfg = cfg.get("config", {})

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        filtered_cfg = {}
        for section, section_data in full_cfg.items():
            if isinstance(section_data, dict):
                filtered_section = {}
                for k, v in section_data.items():
                    # –£–±–∏—Ä–∞–µ–º tp_levels_ —Ç–æ–ª—å–∫–æ –∏–∑ fin_settings
                    if section == "fin_settings" and k.startswith("tp_levels_"):
                        continue
                    filtered_section[k] = v
                filtered_cfg[section] = filtered_section
            else:
                filtered_cfg[section] = section_data

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        pretty_cfg = format_config(
            cfg=filtered_cfg,
            indent=0,
            target_key=None,
            alt_key=None,
            ex_key="tp_levels_gen"
        )

        await message.answer(
            f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}\n\n‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n{pretty_cfg}",
            reply_markup=self.main_menu
        )

    async def start_cmd(self, message: types.Message):
        chat_id = message.chat.id
        self.ensure_user_config(chat_id)

        async with self.bot_iteration_lock:
            # –ï—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç –∏—Ç–µ—Ä–∞—Ü–∏—è –∏–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            if self.context.start_bot_iteration or any(
                pos.get("in_position", False)
                for symbol_data in self.context.position_vars.values()
                for side, pos in symbol_data.items()
                if side != "spec"
            ):
                await message.answer("–ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏–±–æ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏", reply_markup=self.main_menu)
                return

            cfg = self.context.users_configs[chat_id]
            if validate_user_config(cfg):
                self.context.start_bot_iteration = True
                self.context.stop_bot_iteration = False  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                await message.answer("‚úÖ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã", reply_markup=self.main_menu)
            else:
                await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é", reply_markup=self.main_menu)

    async def stop_cmd(self, message: types.Message):
        chat_id = message.chat.id
        self.ensure_user_config(chat_id)

        async with self.bot_iteration_lock:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ ‚Äî —Å—Ç–æ–ø –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω
            if any(
                pos.get("in_position", False)
                for symbol_data in self.context.position_vars.values()
                for side, pos in symbol_data.items()
                if side != "spec"
            ):
                await message.answer("–°–ø–µ—Ä–≤–∞ –∑–∞–∫—Ä–æ–π—Ç–µ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏.", reply_markup=self.main_menu)
                return

            if self.context.start_bot_iteration:
                self.context.start_bot_iteration = False
                self.context.stop_bot_iteration = True
                # self.context.users_configs = {}  # —Å–±—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥–æ–≤
                await message.answer("‚õî –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", reply_markup=self.main_menu)
            else:
                await message.answer("–î–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ—Å–∫–æ–ª—å–∫—É —Ç–æ—Ä–≥–æ–≤–ª—è –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–∞.", reply_markup=self.main_menu)

    # ===== HANDLERS ==========
    async def settings_handler(self, callback: types.CallbackQuery):
        user_id = callback.from_user.id
        self.ensure_user_config(user_id)
        await callback.answer()
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=self._settings_keyboard()
        )

    async def mexc_settings_handler(self, callback: types.CallbackQuery):
        user_id = callback.from_user.id
        self.ensure_user_config(user_id)
        await callback.answer()
        await callback.message.edit_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ MEXC:", reply_markup=self._mexc_keyboard()
        )

    async def fin_settings_handler(self, callback: types.CallbackQuery):
        user_id = callback.from_user.id
        self.ensure_user_config(user_id)
        await callback.answer()
        await callback.message.edit_text(
            "FIN SETTINGS:", reply_markup=self._fin_keyboard()
        )

    # ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ =====
    async def text_message_handler(self, message: types.Message):
        chat_id = message.chat.id
        self.ensure_user_config(chat_id)
        cfg = self.context.users_configs.get(chat_id)
        if not cfg or not cfg.get("_await_field"):
            return

        field_info = cfg["_await_field"]
        section, field = field_info["section"], field_info["field"]
        raw = (message.text or "").strip()
        fs = cfg["config"].setdefault(section, {})

        try:
            if section == "fin_settings":
                # TP Ranges
                if field.startswith("tp_levels_"):  # –∫–ª—é—á –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞: tp_levels_0-500
                    range_key = field.replace("tp_levels_", "")
                    pairs = raw.split()
                    if not 1 <= len(pairs) <= 5:
                        await message.answer("–ú–∞–∫—Å–∏–º—É–º 5 —É—Ä–æ–≤–Ω–µ–π!")
                        return

                    levels = []
                    for p in pairs:
                        if ":" not in p:
                            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 1:3 2:5 ‚Ä¶")
                            return
                        k, v = p.split(":")
                        try:
                            levels.append(float(v))
                        except Exception:
                            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ —á–∏—Å–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä–æ–±–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
                            return

                    if not validate_tp_cap_dep_levels(levels):
                        await message.answer(
                            f"–û—à–∏–±–∫–∞: –≤–≤–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ! "
                            f"–°–µ–π—á–∞—Å: {levels}"
                        )
                        return False

                    # === —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥ ===
                    fs["tp_levels"][range_key] = levels

                    # üîë —Ç—É—Ç —Å—Ä–∞–∑—É –∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                    cfg["config"]["fin_settings"]["tp_levels"][range_key] = levels

                    # # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –¥–ª–∏–Ω
                    # lengths = [len(v) for v in fs["tp_levels"].values() if v]
                    # if lengths and len(set(lengths)) > 1:
                    #     await message.answer(
                    #         f"–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –≤–æ –≤—Å–µ—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö! "
                    #         f"–°–µ–π—á–∞—Å: {len(levels)}"
                    #     )
                    #     return

                # Margin / Leverage / TP Order Volume
                elif field in {"margin_size", "margin_mode", "leverage", "tp_order_volume"}:
                    try:
                        if field == "leverage":
                            val = int(raw)
                            if not val:
                                await message.answer("‚ùó Leverage –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
                                return
                            fs[field] = val
                        else:
                            fs[field] = float(raw.replace(",", "."))
                    except:
                        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
                        return

                # Stop Loss
                elif field == "sl":
                    # await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π Stop Loss –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.\n–í–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è SL (None).")
                    try:
                        val = float(raw.replace(",", "."))
                        fs["sl"] = None if val == 0 else val
                    except:
                        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è SL")
                        return

                # Stop Loss Type
                elif field == "sl_type":
                    if raw not in ("1", "2"):
                        await message.answer("–í–≤–µ–¥–∏—Ç–µ 1 –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ, 2 –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ SL")
                        return
                    fs["sl_type"] = int(raw)

            elif section == "MEXC":
                # API / Secret / Proxy / UID
                if field in {"api_key", "api_secret", "proxy_url", "u_id"}:
                    if field == "proxy_url":
                        raw_val = raw.strip()
                        if raw_val == "0":
                            fs["proxy_url"] = None
                        else:
                            fs["proxy_url"] = raw_val
                        # return  # –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–ª–æ—Å—å
                    else:
                        if not raw:
                            await message.answer("‚ùó –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                            return
                        fs[field] = raw

        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")
            return

        cfg["_await_field"] = None
        await message.answer(f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", reply_markup=self.main_menu)

        # –ê–≤—Ç–æ-–∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –≤–∞–ª–∏–¥–µ–Ω
        if validate_user_config(cfg):
            # self.context.start_bot_iteration = True
            await message.answer("‚úÖ –ö–æ–Ω—Ñ–∏–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω! –¢–æ—Ä–≥–æ–≤–ª—é –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å.", reply_markup=self.main_menu)

    # ===== Callback –¥–ª—è TP Ranges (0-500, 500-1000, 1000+) =====
    async def tp_range_select(self, callback: types.CallbackQuery):
        await callback.answer()
        user_id = callback.from_user.id
        self.ensure_user_config(user_id)

        rk = callback.data.replace("SET_TP_RANGE_", "")
        cfg = self.context.users_configs[user_id]

        # –ü—Ä–æ—Å—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞–ø—Ä—è–º—É—é
        cfg["_await_field"] = {"section": "fin_settings", "field": f"tp_levels_{rk}"}
        await callback.message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {rk} –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1:3 2:5 3:7 ‚Ä¶ "
            "(–º–∞–∫—Å–∏–º—É–º 5 —É—Ä–æ–≤–Ω–µ–π, –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏, –¥–≤–æ–µ—Ç–æ—á–∏–µ –≤–Ω—É—Ç—Ä–∏)."
        )

    # ========= INPUT PROMPTS =========
    async def api_key_input(self, callback: types.CallbackQuery):
        await callback.answer()
        user_id = callback.from_user.id
        self.ensure_user_config(user_id)

        if getattr(self.context, "start_bot_iteration", False):
            await callback.message.answer(
                "‚ùó –î–ª—è –∑–∞–º–µ–Ω—ã API Key —Å–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞ (–°–¢–û–ü), –∑–∞—Ç–µ–º –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞ (–°–¢–ê–†–¢).",
                reply_markup=self.main_menu
            )
            return

        self.context.users_configs[user_id]["_await_field"] = {"section": "MEXC", "field": "api_key"}
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ API Key:")

    async def secret_key_input(self, callback: types.CallbackQuery):
        await callback.answer()
        user_id = callback.from_user.id
        self.ensure_user_config(user_id)

        if getattr(self.context, "start_bot_iteration", False):
            await callback.message.answer(
                "‚ùó –î–ª—è –∑–∞–º–µ–Ω—ã Secret Key —Å–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞ (–°–¢–û–ü), –∑–∞—Ç–µ–º –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞ (–°–¢–ê–†–¢).",
                reply_markup=self.main_menu
            )
            return

        self.context.users_configs[user_id]["_await_field"] = {"section": "MEXC", "field": "api_secret"}
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ Secret Key:")

    async def proxy_input(self, callback: types.CallbackQuery):
        await callback.answer()
        user_id = callback.from_user.id
        self.ensure_user_config(user_id)

        if getattr(self.context, "start_bot_iteration", False):
            await callback.message.answer(
                "‚ùó –î–ª—è –∑–∞–º–µ–Ω—ã Proxy URL —Å–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞ (–°–¢–û–ü), –∑–∞—Ç–µ–º –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞ (–°–¢–ê–†–¢).",
                reply_markup=self.main_menu
            )
            return

        self.context.users_configs[user_id]["_await_field"] = {"section": "MEXC", "field": "proxy_url"}
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ Proxy URL –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "http://PROXY_LOGIN:PROXY_PASSWORD@PROXY_ADDRESS:PROXY_PORT\n"
            "–ò–ª–∏ 0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏."
        )

    async def uid_input(self, callback: types.CallbackQuery):
        await callback.answer()
        user_id = callback.from_user.id
        self.ensure_user_config(user_id)

        if getattr(self.context, "start_bot_iteration", False):
            await callback.message.answer(
                "‚ùó –î–ª—è –∑–∞–º–µ–Ω—ã User ID —Å–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞ (–°–¢–û–ü), –∑–∞—Ç–µ–º –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞ (–°–¢–ê–†–¢).",
                reply_markup=self.main_menu
            )
            return

        self.context.users_configs[user_id]["_await_field"] = {"section": "MEXC", "field": "u_id"}
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ User ID:")



    async def margin_size_input(self, callback: types.CallbackQuery):
        await callback.answer()
        user_id = callback.from_user.id
        self.ensure_user_config(user_id)

        self.context.users_configs[user_id]["_await_field"] = {"section": "fin_settings", "field": "margin_size"}
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ Margin Size (—á–∏—Å–ª–æ):")

    async def margin_mode_input(self, callback: types.CallbackQuery):
        await callback.answer()
        user_id = callback.from_user.id
        self.ensure_user_config(user_id)

        self.context.users_configs[user_id]["_await_field"] = {"section": "fin_settings", "field": "margin_mode"}
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ Margin Mode (1 -- –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, 2 -- –ö—Ä–æ—Å—Å):")

    async def leverage_input(self, callback: types.CallbackQuery):
        await callback.answer()
        user_id = callback.from_user.id
        self.ensure_user_config(user_id)

        self.context.users_configs[user_id]["_await_field"] = {"section": "fin_settings", "field": "leverage"}
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ Leverage (—á–∏—Å–ª–æ):")

    async def sl_input(self, callback: types.CallbackQuery):
        await callback.answer()
        user_id = callback.from_user.id
        self.ensure_user_config(user_id)

        self.context.users_configs[user_id]["_await_field"] = {"section": "fin_settings", "field": "sl"}
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π Stop Loss –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è):")

    async def sl_type_input(self, callback: types.CallbackQuery):
        await callback.answer()
        user_id = callback.from_user.id
        self.ensure_user_config(user_id)

        self.context.users_configs[user_id]["_await_field"] = {"section": "fin_settings", "field": "sl_type"}
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø Stop Loss: 1 ‚Äì —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, 2 ‚Äì –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π:")

    async def tp_levels_input(self, callback: types.CallbackQuery):
        await callback.answer()
        user_id = callback.from_user.id
        self.ensure_user_config(user_id)

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=r, callback_data=f"SET_TP_RANGE_{r}")] for r in RANGE_KEYS
            ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="SET_FIN")]]
        )
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω TP Levels:", reply_markup=keyboard)

    async def tp_order_volume_input(self, callback: types.CallbackQuery):
        await callback.answer()
        user_id = callback.from_user.id
        self.ensure_user_config(user_id)

        self.context.users_configs[user_id]["_await_field"] = {"section": "fin_settings", "field": "tp_order_volume"}
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ TP Order Volume (—á–∏—Å–ª–æ):")

    # ===== –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å inline START/STOP =====
    async def start_button(self, callback: types.CallbackQuery):
        await callback.answer()
        user_id = callback.from_user.id
        self.ensure_user_config(user_id)

        cfg = self.context.users_configs[user_id]
        if validate_user_config(cfg):
            self.context.start_bot_iteration = True
            await callback.message.answer("‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞", reply_markup=self.main_menu)
        else:
            await callback.message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é", reply_markup=self.main_menu)

    async def stop_button(self, callback: types.CallbackQuery):
        if any(
            pos.get("in_position", False)
            for symbol_data in self.context.position_vars.values()
            for side, pos in symbol_data.items()
            if side != "spec"
        ):
            await callback.message.answer("–°–ø–µ—Ä–≤–∞ –∑–∞–∫—Ä–æ–π—Ç–µ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏.", reply_markup=self.main_menu)
            return
        user_id = callback.from_user.id
        self.ensure_user_config(user_id)

        if self.context.start_bot_iteration:
            self.context.start_bot_iteration = False
            self.context.stop_bot_iteration = True
            await callback.message.answer("‚õî –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", reply_markup=self.main_menu)
        else:
            await callback.message.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Ç–æ—Ä–≥–æ–≤–ª—è –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞.", reply_markup=self.main_menu)

    # ===== Run / Stop =====
    async def run(self):
        self._polling_task = asyncio.create_task(
            self.dp.start_polling(self.bot, stop_signal=lambda: self._stop_flag)
        )
        await asyncio.sleep(0.1)

    async def stop(self):
        pass
        # self._stop_flag = True
        # if hasattr(self.bot, "session") and self.bot.session:
        #     await self.bot.session.close()
        # if self._polling_task:
        #     try:
        #         await self._polling_task
        #     except asyncio.CancelledError:
        #         pass
        #     self._polling_task = None